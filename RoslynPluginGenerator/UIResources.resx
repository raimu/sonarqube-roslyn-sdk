<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="APG_AnalyzersLocated" xml:space="preserve">
    <value>Number of analyzers located in package {0}: {1}</value>
  </data>
  <data name="APG_CreatedTempWorkingDir" xml:space="preserve">
    <value>Temporary working folder for this run: {0}</value>
  </data>
  <data name="APG_GeneratingConstantSqaleFile" xml:space="preserve">
    <value>Generating fixed remediation cost SQALE file...</value>
  </data>
  <data name="APG_GeneratingPlugin" xml:space="preserve">
    <value>Generating plugin...</value>
  </data>
  <data name="APG_GeneratingRules" xml:space="preserve">
    <value>Generating rules...</value>
  </data>
  <data name="APG_InvalidSqaleFile" xml:space="preserve">
    <value>The specified SQALE file is invalid: {0}</value>
  </data>
  <data name="APG_LocatingAnalyzers" xml:space="preserve">
    <value>Looking for analyzers in the package...</value>
  </data>
  <data name="APG_LogAnalyzerLanguage" xml:space="preserve">
    <value>Looking for {0} analyzers</value>
  </data>
  <data name="APG_NGAcceptedPackageLicenses" xml:space="preserve">
    <value>You have accepted the licenses for the following packages:</value>
  </data>
  <data name="APG_NGPackageRequiresLicenseAcceptance" xml:space="preserve">
    <value>Cannot create a plugin for package {0} v{1} because the packages listed below require licenses to be accepted. Please check the licenses and then re-run the generator specifying the "/acceptLicenses" argument.</value>
  </data>
  <data name="APG_NG_PackageAndLicenseUrl" xml:space="preserve">
    <value>{0} v{1}: {2}</value>
  </data>
  <data name="APG_NG_UnspecifiedLicenseUrl" xml:space="preserve">
    <value>{license URL not specified}</value>
  </data>
  <data name="APG_NoAnalyzersFound" xml:space="preserve">
    <value>No analyzers were found in package: {0}</value>
  </data>
  <data name="APG_NoAnalyzersInTargetSuggestRecurse" xml:space="preserve">
    <value>Re-run this generator with /recurse if plugins should be generated for the dependencies of this package.</value>
  </data>
  <data name="APG_PluginGenerated" xml:space="preserve">
    <value>Plugin generated: {0}</value>
  </data>
  <data name="APG_RecurseEnabled_SQALENotEnabled" xml:space="preserve">
    <value>SQALE information cannot currently be embedded into plugins generated from package dependencies.</value>
  </data>
  <data name="APG_RulesGeneratedToFile" xml:space="preserve">
    <value>{0} rules generated to {1}</value>
  </data>
  <data name="APG_SqaleGeneratedToFile" xml:space="preserve">
    <value>SQALE generated to file {0}</value>
  </data>
  <data name="APG_TemplateSqaleFileGenerated" xml:space="preserve">
    <value>
SQALE: an empty SQALE file for the analyzer was saved to {0}. To provide SQALE remediation information for the analyzer:
 * rename the file
 * fill in the appropriate remediation information for each diagnostic
 * re-run this generator specifying the sqale file to use with the /sqale:[filename] argument.
</value>
  </data>
  <data name="APG_UnsupportedLanguage" xml:space="preserve">
    <value>The language '{0}' is not supported. Valid options are 'cs' or 'vb'.</value>
  </data>
  <data name="AssemblyDescription" xml:space="preserve">
    <value>Roslyn Analyzer Plugin Generator for SonarQube</value>
  </data>
  <data name="Builder_Error_OutputJarPathMustBeSpecified" xml:space="preserve">
    <value>The file path for the jar file to be created must be specified</value>
  </data>
  <data name="Builder_Error_RequiredPropertyMissing" xml:space="preserve">
    <value>Required plugin definition property is missing: {0}</value>
  </data>
  <data name="Builder_ExistingJarWillBeOvewritten" xml:space="preserve">
    <value>The existing jar file will be overwritten</value>
  </data>
  <data name="NG_AddingNewDependency" xml:space="preserve">
    <value>  Adding new dependency: {0} version {1}</value>
  </data>
  <data name="NG_DuplicateDependency" xml:space="preserve">
    <value>  Duplicate dependency: {0} version {1}</value>
  </data>
  <data name="NG_ERROR_PackageInstallFail" xml:space="preserve">
    <value>Failed to install package: {0}
Check that there are released versions of the package, or specify a pre-release version identifier.</value>
  </data>
  <data name="NG_ERROR_PackageNotFound" xml:space="preserve">
    <value>No packages with the specified id were found: {0}</value>
  </data>
  <data name="NG_ERROR_PackageVersionNotFound" xml:space="preserve">
    <value>Package version was not found: {0}</value>
  </data>
  <data name="NG_FailedToResolveDependency" xml:space="preserve">
    <value>Failed to resolve dependency: {0} version {1}</value>
  </data>
  <data name="NG_FetchingConfigFiles" xml:space="preserve">
    <value>Fetching NuGet config files...</value>
  </data>
  <data name="NG_FileConflictOccurred" xml:space="preserve">
    <value>NuGet file conflict occurred: {0}
The conflict will be ignored.</value>
  </data>
  <data name="NG_IsLatestPackageVersionSuffix" xml:space="preserve">
    <value>- latest version</value>
  </data>
  <data name="NG_ListEnabledPackageSource" xml:space="preserve">
    <value>    {0}, machine-wide: {1}</value>
  </data>
  <data name="NG_ListingEnablePackageSources" xml:space="preserve">
    <value>Enabled package sources:</value>
  </data>
  <data name="NG_LocatingPackages" xml:space="preserve">
    <value>Attempting to locate package with id '{0}'</value>
  </data>
  <data name="NG_NoEnabledPackageSources" xml:space="preserve">
    <value>No enabled package sources. Please update the NuGet config to specify at least one valid package source.</value>
  </data>
  <data name="NG_NumberOfPackagesLocated" xml:space="preserve">
    <value>Number of packages located: {0}</value>
  </data>
  <data name="NG_PackageVersionListHeader" xml:space="preserve">
    <value>Package versions:</value>
  </data>
  <data name="NG_ResolvingPackageDependencies" xml:space="preserve">
    <value>Resolving dependencies for {0} version {1}...</value>
  </data>
  <data name="NG_SelectedPackageVersion" xml:space="preserve">
    <value>Version was not specified. Using version {0}.</value>
  </data>
  <data name="NG_UsingLatestPackageVersion" xml:space="preserve">
    <value>Using version marked as latest.</value>
  </data>
  <data name="RuleGen_DuplicateKey" xml:space="preserve">
    <value>Skipping rule in analyzer {0}: Duplicate key.</value>
  </data>
  <data name="RuleGen_EmptyKey" xml:space="preserve">
    <value>Skipping rule in analyzer {0}: No key found.</value>
  </data>
  <data name="RuleGen_ForMoreDetailsLink" xml:space="preserve">
    <value>For more information visit &lt;a href="{0}" target="_blank"&gt;the rule's help page&lt;/a&gt;.</value>
  </data>
  <data name="RuleGen_MoreDetailsTitle" xml:space="preserve">
    <value>More Details</value>
  </data>
  <data name="RuleGen_NoDescription" xml:space="preserve">
    <value>No description was provided.</value>
  </data>
  <data name="Scanner_AnalyzerInstantiationFail" xml:space="preserve">
    <value>Could not instantiate analyzers from '{0}'. 

Error: {1}</value>
  </data>
  <data name="Scanner_AnalyzerLoaded" xml:space="preserve">
    <value>Loaded analyzer: {0}</value>
  </data>
  <data name="Scanner_AnalyzersLoadSuccess" xml:space="preserve">
    <value>Loaded: {0} analyzers.</value>
  </data>
  <data name="Scanner_AssemblyLoadSuccess" xml:space="preserve">
    <value>Loaded assembly: {0}</value>
  </data>
  <data name="Scanner_NoAnalyzers" xml:space="preserve">
    <value>No analyzers found in assembly {0}</value>
  </data>
  <data name="ZIP_DeletingExistingArchive" xml:space="preserve">
    <value>Deleting existing archive...</value>
  </data>
  <data name="ZIP_InsertingFile" xml:space="preserve">
    <value>Inserting file {0}. Source: {1}</value>
  </data>
  <data name="ZIP_NewArchiveCreated" xml:space="preserve">
    <value>New archive created: {0}</value>
  </data>
  <data name="ZIP_UpdatingArchive" xml:space="preserve">
    <value>Updating archive {0}</value>
  </data>
  <data name="ZIP_WorkingDirectory" xml:space="preserve">
    <value>Working directory: {0}</value>
  </data>
</root>